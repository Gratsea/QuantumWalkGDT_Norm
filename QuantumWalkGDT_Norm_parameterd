constant parameter d at the angle theta : 

theta=y+d the algorithm finds the best y,v,x such that the effect of the constant parmeter to be mnimized.

Results : 

1. paramter d = 1.0

n=5,k=n+1
initial = initial = np.zeros((2*k,1),dtype=complex)
    #localised on one site
    initial[0][0]= 1.
    initial[1][0]= 1.5
    initial/= np.linalg.norm(initial)

coin Paramterers = z [,.....,l]
        x=abs(z[0+l])
        y=z[1+l]
        v=z[2+l]

ret.x = array([  2.55216002e-01,   2.44036414e-01,   3.47006398e+00,
                -2.09778232e-07,   2.03732537e+00,   1.74622342e+00,
                -1.90538858e-01,   6.12311536e+00,  -4.72223093e-01,
                -8.24532495e-08,   8.82459371e+00,   8.97758511e-01,
                 1.37812711e-01,   2.28837859e+00,   8.49567209e-01])
                 
               l  [ 0.70711337  0.70710019]
              NORM  1.4142135617821034
                 
   coin operators : 
 C1= [array([[ 0.50518908+0.j        , -0.62156446-0.59869994j],
           [-0.08104361-0.85919493j,  0.31475023-0.39515604j]]),
 C2= array([[  4.58015537e-04 +0.00000000e+00j, -9.93132686e-01 -1.16992559e-01j],
         [  6.98667675e-01 -7.15446203e-01j,  3.56139942e-04 -2.87997523e-04j]]),
 C3 = array([[ 0.43650757+0.j        , -0.83323890-0.33937307j],
        [ 0.07841162-0.89627717j,  0.19925974-0.38837407j]])]
 C4=  array([[  2.87146739e-04 +0.00000000e+00j, 8.51972514e-01 -5.23586434e-01j],
        [ -9.48856865e-01 +3.15706459e-01j,1.84664183e-04 -2.19891767e-04j]]),
 C5= array([[ 0.37123134+0.j        , -0.57283884-0.73078243j],
        [-0.82676164+0.42267302j, -0.33691321-0.15589163j]])]
